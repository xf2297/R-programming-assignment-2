# makeCacheMatrix: This function creates a special "matrix" object that can cache its inverse.
# cacheSolve: This function computes the inverse of the special "matrix" returned by makeCacheMatrix above. 
# If the inverse has already been calculated (and the matrix has not changed), then the cachesolve should retrieve the 
# inverse from the cache.

# Computing the inverse of a square matrix can be done with the solve function in R. For example, if X is a square invertible matrix, 
# then solve(X) returns its inverse.

# For this assignment, assume that the matrix supplied is always invertible.

## Scrips:

# creates a special "matrix" object that can cache its inverse.

makeCacheMatrix <- function(x = matrix()) {

 # initialize the inverse property
  inv <- NULL
  
 # method to set the matrix
  set <- function(y) {
    x <<- y
    inv <<- NULL
  }
  
 # method to get the matrix
  get <- function() x
  
 # method to set the inverse of the matrix  
  setInverse <- function(inverse) inv <<- inverse
  
 # method to get the inverse of the matrix
  getInverse <- function() inv
  
 # return the list
  list(set = set,
       get = get,
       setInverse = setInverse,
       getInverse = getInverse)
}


# This function computes the inverse of the special "matrix" created by 
# makeCacheMatrix above. If the inverse has already been calculated (and the 
# matrix has not changed), then it should retrieve the inverse from the cache.

cacheSolve <- function(x, ...) {
  # Return a matrix that is the inverse of 'x'
  inv <- x$getInverse()
  
  # just return the inverse if it has been set
  if (!is.null(inv)) {
    message("getting cached data")
    return(inv)
  }
  
  # get the matrix from our objects
  mat <- x$get()
  
  # calculate the inverse using matrix multiplication
  inv <- solve(mat, ...)
  
  # set the inverse back to the object
  x$setInverse(inv)
  
  # print out the matrix
  inv
}
